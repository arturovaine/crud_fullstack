// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"// mysql, postgresql, etc
  url      = env("DATABASE_URL")
}

model Categoria {
  categoria_id         Int       @id @default(autoincrement())
  nome_categoria       String?   //@db.Varhar(20) -> mysql,postgresql
  descricao_categoria  String?   //@db.VarChar(200)
  // Native type VarChar is not supported for sqlite connector.
  produtos             Produto[]

  @@map("categoria")
}

model Cliente {
  cliente_id        Int         @id @default(autoincrement())
  email             String?     //@db.VarChar(50)
  username          String?     //@db.VarChar(15)
  senha             String?     //@db.VarChar(20)
  nome              String?     //@db.VarChar(200)
  cpf               String      //@unique @db.VarChar(11) 
  telefone          String?     //@db.VarChar(11)
  data_nascimento   DateTime?   
  endereco_id       Int
  pedidos           Pedido[]
  Endereco          Endereco    @relation(fields: [endereco_id], references: [endereco_id])

  @@map("cliente")
}

model Endereco {
  endereco_id   Int       @id @default(autoincrement())
  cep           String?   //@db.VarChar(9)
  rua           String?   //@db.VarChar(100)
  bairro        String?   //@db.VarChar(30)
  cidade        String?   //@db.VarChar(30)
  numero        String?   //@db.VarChar(10)
  complemento   String?   //@db.VarChar(100)
  uf            String?   //@db.VarChar(2)
  Clientes      Cliente[]

  @@map("endereco")
}

model Pedido {
  pedido_id          Int               @id @default(autoincrement())
  numero_pedido      Int?              
  valor_total_pedido Float?            
  data_pedido        DateTime          @default(now())
  status             Boolean?          
  cliente_id         Int               
  Cliente            Cliente           @relation(fields: [cliente_id], references: [cliente_id])
  ProdutoPedido      ProdutoPedido[]   

  @@map("pedido")
}

model Produto {
  produto_id            Int             @id @default(autoincrement())
  nome_produto          String?         //@db.VarChar(50)
  descricao_produto     String?         //@db.VarChar(200)
  preco_produto         Float?          
  qtd_estoque           Int?            
  data_cadastro_produto DateTime        @default(now())
  categoria_id          Int             
  imagem                String?         
  Categoria             Categoria       @relation(fields: [categoria_id], references: [categoria_id])
  ProdutoPedido         ProdutoPedido[] 

  @@map("produto")
}

model ProdutoPedido {
  produto_pedido_id     Int     @id @default(autoincrement())
  qtd_produto_pedido    Int?    
  preco_produto_pedido  Float?  
  produto_id            Int?    
  pedido_id             Int?    
  Produto               Produto? @relation(fields: [produto_id], references: [produto_id])
  // Error validating: The relation field `Produto` uses the scalar fields produto_id. At least one of those fields is optional. Hence the relation field must be optional as well.
  Pedido                Pedido?  @relation(fields: [pedido_id], references: [pedido_id])
  // Error validating: The relation field `Pedido` uses the scalar fields pedido_id. At least one of those fields is optional. Hence the relation field must be optional as well.

  @@map("produto_pedido")
}
